{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\react-second\\\\src\\\\Header.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Footer() {\n  _s();\n  const [email, setEmail] = useState('');\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  const handleSubscribe = () => {\n    // Here you can implement your subscription logic, such as sending a request to your backend\n    // For simplicity, let's just set isSubscribed to true\n    setIsSubscribed(true);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"rounded-pill p-1 w-75 form-control-text\",\n          placeholder: \"Enter Your Email\",\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group-button\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-style\",\n            onClick: handleSubscribe,\n            children: \"Get it now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), isSubscribed && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"subscribe-message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You are subscribed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(Footer, \"Z+MSe3DMLnH2DqM4EZ9v3drKPVI=\");\n_c = Footer;\nexport default Footer;\nvar _c;\n$RefreshReg$(_c, \"Footer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Footer","_s","email","setEmail","isSubscribed","setIsSubscribed","handleSubscribe","children","className","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/React/react-second/src/Header.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Footer() {\r\n    const [email, setEmail] = useState('');\r\n    const [isSubscribed, setIsSubscribed] = useState(false);\r\n\r\n    const handleSubscribe = () => {\r\n        // Here you can implement your subscription logic, such as sending a request to your backend\r\n        // For simplicity, let's just set isSubscribed to true\r\n        setIsSubscribed(true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <footer>\r\n                {/* Your existing footer content */}\r\n                <div className='input-group mt-3'>\r\n                    <input\r\n                        type=\"text\"\r\n                        className='rounded-pill p-1 w-75 form-control-text'\r\n                        placeholder='Enter Your Email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    />\r\n                    <div className=\"input-group-button\">\r\n                        <button className=\"btn-style\" onClick={handleSubscribe}>Get it now</button>\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n\r\n            {isSubscribed && (\r\n                <div className=\"subscribe-message\">\r\n                    <p>You are subscribed!</p>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExC,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMW,eAAe,GAAGA,CAAA,KAAM;IAC1B;IACA;IACAD,eAAe,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,oBACIR,OAAA,CAAAE,SAAA;IAAAQ,QAAA,gBACIV,OAAA;MAAAU,QAAA,eAEIV,OAAA;QAAKW,SAAS,EAAC,kBAAkB;QAAAD,QAAA,gBAC7BV,OAAA;UACIY,IAAI,EAAC,MAAM;UACXD,SAAS,EAAC,yCAAyC;UACnDE,WAAW,EAAC,kBAAkB;UAC9BC,KAAK,EAAET,KAAM;UACbU,QAAQ,EAAGC,CAAC,IAAKV,QAAQ,CAACU,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7C,CAAC,eACFrB,OAAA;UAAKW,SAAS,EAAC,oBAAoB;UAAAD,QAAA,eAC/BV,OAAA;YAAQW,SAAS,EAAC,WAAW;YAACW,OAAO,EAAEb,eAAgB;YAAAC,QAAA,EAAC;UAAU;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1E,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,EAERd,YAAY,iBACTP,OAAA;MAAKW,SAAS,EAAC,mBAAmB;MAAAD,QAAA,eAC9BV,OAAA;QAAAU,QAAA,EAAG;MAAmB;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CACR;EAAA,eACH,CAAC;AAEX;AAACjB,EAAA,CAnCQD,MAAM;AAAAoB,EAAA,GAANpB,MAAM;AAqCf,eAAeA,MAAM;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}